module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateIngredient {
  count: Int!
}

type AggregateRecipes {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Ingredient {
  id: ID!
  name: String!
  amount: Int!
  recipes(where: RecipesWhereInput, orderBy: RecipesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipes!]
}

type IngredientConnection {
  pageInfo: PageInfo!
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  id: ID
  name: String!
  amount: Int!
  recipes: RecipesCreateManyWithoutIngredientsInput
}

input IngredientCreateManyWithoutRecipesInput {
  create: [IngredientCreateWithoutRecipesInput!]
  connect: [IngredientWhereUniqueInput!]
}

input IngredientCreateWithoutRecipesInput {
  id: ID
  name: String!
  amount: Int!
}

type IngredientEdge {
  node: Ingredient!
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  amount_ASC
  amount_DESC
}

type IngredientPreviousValues {
  id: ID!
  name: String!
  amount: Int!
}

input IngredientScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  AND: [IngredientScalarWhereInput!]
  OR: [IngredientScalarWhereInput!]
  NOT: [IngredientScalarWhereInput!]
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
  AND: [IngredientSubscriptionWhereInput!]
  OR: [IngredientSubscriptionWhereInput!]
  NOT: [IngredientSubscriptionWhereInput!]
}

input IngredientUpdateInput {
  name: String
  amount: Int
  recipes: RecipesUpdateManyWithoutIngredientsInput
}

input IngredientUpdateManyDataInput {
  name: String
  amount: Int
}

input IngredientUpdateManyMutationInput {
  name: String
  amount: Int
}

input IngredientUpdateManyWithoutRecipesInput {
  create: [IngredientCreateWithoutRecipesInput!]
  delete: [IngredientWhereUniqueInput!]
  connect: [IngredientWhereUniqueInput!]
  set: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  update: [IngredientUpdateWithWhereUniqueWithoutRecipesInput!]
  upsert: [IngredientUpsertWithWhereUniqueWithoutRecipesInput!]
  deleteMany: [IngredientScalarWhereInput!]
  updateMany: [IngredientUpdateManyWithWhereNestedInput!]
}

input IngredientUpdateManyWithWhereNestedInput {
  where: IngredientScalarWhereInput!
  data: IngredientUpdateManyDataInput!
}

input IngredientUpdateWithoutRecipesDataInput {
  name: String
  amount: Int
}

input IngredientUpdateWithWhereUniqueWithoutRecipesInput {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateWithoutRecipesDataInput!
}

input IngredientUpsertWithWhereUniqueWithoutRecipesInput {
  where: IngredientWhereUniqueInput!
  update: IngredientUpdateWithoutRecipesDataInput!
  create: IngredientCreateWithoutRecipesInput!
}

input IngredientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  recipes_every: RecipesWhereInput
  recipes_some: RecipesWhereInput
  recipes_none: RecipesWhereInput
  AND: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  NOT: [IngredientWhereInput!]
}

input IngredientWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createIngredient(data: IngredientCreateInput!): Ingredient!
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updateManyIngredients(data: IngredientUpdateManyMutationInput!, where: IngredientWhereInput): BatchPayload!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteManyIngredients(where: IngredientWhereInput): BatchPayload!
  createRecipes(data: RecipesCreateInput!): Recipes!
  updateRecipes(data: RecipesUpdateInput!, where: RecipesWhereUniqueInput!): Recipes
  updateManyRecipeses(data: RecipesUpdateManyMutationInput!, where: RecipesWhereInput): BatchPayload!
  upsertRecipes(where: RecipesWhereUniqueInput!, create: RecipesCreateInput!, update: RecipesUpdateInput!): Recipes!
  deleteRecipes(where: RecipesWhereUniqueInput!): Recipes
  deleteManyRecipeses(where: RecipesWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  recipes(where: RecipesWhereUniqueInput!): Recipes
  recipeses(where: RecipesWhereInput, orderBy: RecipesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipes]!
  recipesesConnection(where: RecipesWhereInput, orderBy: RecipesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipesConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Recipes {
  id: ID!
  name: String!
  description: String!
  imgUrl: String!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
}

type RecipesConnection {
  pageInfo: PageInfo!
  edges: [RecipesEdge]!
  aggregate: AggregateRecipes!
}

input RecipesCreateInput {
  id: ID
  name: String!
  description: String!
  imgUrl: String!
  ingredients: IngredientCreateManyWithoutRecipesInput
}

input RecipesCreateManyWithoutIngredientsInput {
  create: [RecipesCreateWithoutIngredientsInput!]
  connect: [RecipesWhereUniqueInput!]
}

input RecipesCreateWithoutIngredientsInput {
  id: ID
  name: String!
  description: String!
  imgUrl: String!
}

type RecipesEdge {
  node: Recipes!
  cursor: String!
}

enum RecipesOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  imgUrl_ASC
  imgUrl_DESC
}

type RecipesPreviousValues {
  id: ID!
  name: String!
  description: String!
  imgUrl: String!
}

input RecipesScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  imgUrl: String
  imgUrl_not: String
  imgUrl_in: [String!]
  imgUrl_not_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_contains: String
  imgUrl_not_contains: String
  imgUrl_starts_with: String
  imgUrl_not_starts_with: String
  imgUrl_ends_with: String
  imgUrl_not_ends_with: String
  AND: [RecipesScalarWhereInput!]
  OR: [RecipesScalarWhereInput!]
  NOT: [RecipesScalarWhereInput!]
}

type RecipesSubscriptionPayload {
  mutation: MutationType!
  node: Recipes
  updatedFields: [String!]
  previousValues: RecipesPreviousValues
}

input RecipesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecipesWhereInput
  AND: [RecipesSubscriptionWhereInput!]
  OR: [RecipesSubscriptionWhereInput!]
  NOT: [RecipesSubscriptionWhereInput!]
}

input RecipesUpdateInput {
  name: String
  description: String
  imgUrl: String
  ingredients: IngredientUpdateManyWithoutRecipesInput
}

input RecipesUpdateManyDataInput {
  name: String
  description: String
  imgUrl: String
}

input RecipesUpdateManyMutationInput {
  name: String
  description: String
  imgUrl: String
}

input RecipesUpdateManyWithoutIngredientsInput {
  create: [RecipesCreateWithoutIngredientsInput!]
  delete: [RecipesWhereUniqueInput!]
  connect: [RecipesWhereUniqueInput!]
  set: [RecipesWhereUniqueInput!]
  disconnect: [RecipesWhereUniqueInput!]
  update: [RecipesUpdateWithWhereUniqueWithoutIngredientsInput!]
  upsert: [RecipesUpsertWithWhereUniqueWithoutIngredientsInput!]
  deleteMany: [RecipesScalarWhereInput!]
  updateMany: [RecipesUpdateManyWithWhereNestedInput!]
}

input RecipesUpdateManyWithWhereNestedInput {
  where: RecipesScalarWhereInput!
  data: RecipesUpdateManyDataInput!
}

input RecipesUpdateWithoutIngredientsDataInput {
  name: String
  description: String
  imgUrl: String
}

input RecipesUpdateWithWhereUniqueWithoutIngredientsInput {
  where: RecipesWhereUniqueInput!
  data: RecipesUpdateWithoutIngredientsDataInput!
}

input RecipesUpsertWithWhereUniqueWithoutIngredientsInput {
  where: RecipesWhereUniqueInput!
  update: RecipesUpdateWithoutIngredientsDataInput!
  create: RecipesCreateWithoutIngredientsInput!
}

input RecipesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  imgUrl: String
  imgUrl_not: String
  imgUrl_in: [String!]
  imgUrl_not_in: [String!]
  imgUrl_lt: String
  imgUrl_lte: String
  imgUrl_gt: String
  imgUrl_gte: String
  imgUrl_contains: String
  imgUrl_not_contains: String
  imgUrl_starts_with: String
  imgUrl_not_starts_with: String
  imgUrl_ends_with: String
  imgUrl_not_ends_with: String
  ingredients_every: IngredientWhereInput
  ingredients_some: IngredientWhereInput
  ingredients_none: IngredientWhereInput
  AND: [RecipesWhereInput!]
  OR: [RecipesWhereInput!]
  NOT: [RecipesWhereInput!]
}

input RecipesWhereUniqueInput {
  id: ID
}

type Subscription {
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
  recipes(where: RecipesSubscriptionWhereInput): RecipesSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    